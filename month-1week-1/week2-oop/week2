<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SecureBank - Online Banking</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            max-width: 800px;
            width: 100%;
            padding: 40px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .header h1 {
            color: #667eea;
            font-size: 2.5em;
            margin-bottom: 10px;
        }

        .balance-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
        }

        .balance-label {
            font-size: 0.9em;
            opacity: 0.9;
            margin-bottom: 10px;
        }

        .balance-amount {
            font-size: 3em;
            font-weight: bold;
        }

        .account-info {
            margin-top: 15px;
            opacity: 0.9;
            font-size: 0.95em;
        }

        .actions {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-bottom: 30px;
        }

        .btn {
            padding: 15px 25px;
            border: none;
            border-radius: 10px;
            font-size: 1em;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-success {
            background: #48bb78;
            color: white;
        }

        .btn-warning {
            background: #ed8936;
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.2);
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background: white;
            padding: 30px;
            border-radius: 15px;
            max-width: 500px;
            width: 90%;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }

        .modal-header {
            font-size: 1.5em;
            margin-bottom: 20px;
            color: #667eea;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #4a5568;
            font-weight: 600;
        }

        .form-group input {
            width: 100%;
            padding: 12px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            font-size: 1em;
            transition: border 0.3s;
        }

        .form-group input:focus {
            outline: none;
            border-color: #667eea;
        }

        .form-actions {
            display: flex;
            gap: 10px;
            margin-top: 25px;
        }

        .transactions {
            margin-top: 30px;
        }

        .transactions h2 {
            color: #2d3748;
            margin-bottom: 20px;
            font-size: 1.5em;
        }

        .transaction-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            border-bottom: 1px solid #e2e8f0;
            transition: background 0.2s;
        }

        .transaction-item:hover {
            background: #f7fafc;
        }

        .transaction-type {
            font-weight: 600;
            color: #4a5568;
        }

        .transaction-amount {
            font-weight: bold;
            font-size: 1.1em;
        }

        .transaction-amount.positive {
            color: #48bb78;
        }

        .transaction-amount.negative {
            color: #f56565;
        }

        .success-message {
            background: #48bb78;
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            display: none;
        }

        .success-message.show {
            display: block;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üè¶ SecureBank</h1>
            <p>Welcome back, <strong id="accountName">John Doe</strong></p>
        </div>

        <div id="successMessage" class="success-message"></div>

        <div class="balance-card">
            <div class="balance-label">Available Balance</div>
            <div class="balance-amount" id="balance">$1,000.00</div>
            <div class="account-info">Account: <span id="accountNumber">****1234</span></div>
        </div>

        <div class="actions">
            <button class="btn btn-primary" onclick="openModal('deposit')">üí∞ Deposit</button>
            <button class="btn btn-success" onclick="openModal('withdraw')">üí∏ Withdraw</button>
            <button class="btn btn-warning" onclick="openModal('transfer')">üîÑ Transfer</button>
        </div>

        <div class="transactions">
            <h2>Recent Transactions</h2>
            <div id="transactionList">
                <!-- Transactions will be added here -->
            </div>
        </div>
    </div>

    <!-- Deposit Modal -->
    <div id="depositModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">üí∞ Deposit Money</div>
            <div class="form-group">
                <label>Amount</label>
                <input type="number" id="depositAmount" placeholder="Enter amount" min="0" step="0.01">
            </div>
            <div class="form-group">
                <label>Description</label>
                <input type="text" id="depositDesc" placeholder="e.g., Salary deposit">
            </div>
            <div class="form-actions">
                <button class="btn btn-primary" onclick="deposit()">Deposit</button>
                <button class="btn" onclick="closeModal('deposit')">Cancel</button>
            </div>
        </div>
    </div>

    <!-- Withdraw Modal -->
    <div id="withdrawModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">üí∏ Withdraw Money</div>
            <div class="form-group">
                <label>Amount</label>
                <input type="number" id="withdrawAmount" placeholder="Enter amount" min="0" step="0.01">
            </div>
            <div class="form-group">
                <label>Description</label>
                <input type="text" id="withdrawDesc" placeholder="e.g., ATM withdrawal">
            </div>
            <div class="form-actions">
                <button class="btn btn-success" onclick="withdraw()">Withdraw</button>
                <button class="btn" onclick="closeModal('withdraw')">Cancel</button>
            </div>
        </div>
    </div>

    <!-- Transfer Modal -->
    <div id="transferModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">üîÑ Transfer Money</div>
            <div class="form-group">
                <label>To Account</label>
                <input type="text" id="transferTo" placeholder="Account name or number">
            </div>
            <div class="form-group">
                <label>Amount</label>
                <input type="number" id="transferAmount" placeholder="Enter amount" min="0" step="0.01">
            </div>
            <div class="form-group">
                <label>Description</label>
                <input type="text" id="transferDesc" placeholder="e.g., Payment to Alice">
            </div>
            <div class="form-actions">
                <button class="btn btn-warning" onclick="transfer()">Transfer</button>
                <button class="btn" onclick="closeModal('transfer')">Cancel</button>
            </div>
        </div>
    </div>

    <script>
        // Simple banking logic
        let balance = 1000.00;
        let transactions = [
            { type: 'Account Created', amount: 1000.00, date: new Date().toLocaleDateString() }
        ];

        function updateBalance() {
            document.getElementById('balance').textContent = '$' + balance.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',');
        }

        function updateTransactions() {
            const list = document.getElementById('transactionList');
            list.innerHTML = '';
            
            transactions.slice().reverse().forEach(transaction => {
                const item = document.createElement('div');
                item.className = 'transaction-item';
                
                const amountClass = transaction.amount > 0 ? 'positive' : 'negative';
                const amountPrefix = transaction.amount > 0 ? '+' : '';
                
                item.innerHTML = `
                    <div>
                        <div class="transaction-type">${transaction.type}</div>
                        <div style="font-size: 0.85em; color: #718096; margin-top: 5px;">${transaction.date}</div>
                    </div>
                    <div class="transaction-amount ${amountClass}">
                        ${amountPrefix}$${Math.abs(transaction.amount).toFixed(2)}
                    </div>
                `;
                list.appendChild(item);
            });
        }

        function showSuccess(message) {
            const msg = document.getElementById('successMessage');
            msg.textContent = '‚úÖ ' + message;
            msg.classList.add('show');
            setTimeout(() => msg.classList.remove('show'), 3000);
        }

        function openModal(type) {
            document.getElementById(type + 'Modal').classList.add('active');
        }

        function closeModal(type) {
            document.getElementById(type + 'Modal').classList.remove('active');
            // Clear inputs
            document.querySelectorAll('#' + type + 'Modal input').forEach(input => input.value = '');
        }

        function deposit() {
            const amount = parseFloat(document.getElementById('depositAmount').value);
            const desc = document.getElementById('depositDesc').value || 'Deposit';
            
            if (!amount || amount <= 0) {
                alert('Please enter a valid amount');
                return;
            }
            
            balance += amount;
            transactions.push({
                type: desc,
                amount: amount,
                date: new Date().toLocaleDateString()
            });
            
            updateBalance();
            updateTransactions();
            closeModal('deposit');
            showSuccess(`Deposited $${amount.toFixed(2)} successfully!`);
        }

        function withdraw() {
            const amount = parseFloat(document.getElementById('withdrawAmount').value);
            const desc = document.getElementById('withdrawDesc').value || 'Withdrawal';
            
            if (!amount || amount <= 0) {
                alert('Please enter a valid amount');
                return;
            }
            
            if (amount > balance) {
                alert('Insufficient funds!');
                return;
            }
            
            balance -= amount;
            transactions.push({
                type: desc,
                amount: -amount,
                date: new Date().toLocaleDateString()
            });
            
            updateBalance();
            updateTransactions();
            closeModal('withdraw');
            showSuccess(`Withdrew $${amount.toFixed(2)} successfully!`);
        }

        function transfer() {
            const to = document.getElementById('transferTo').value;
            const amount = parseFloat(document.getElementById('transferAmount').value);
            const desc = document.getElementById('transferDesc').value || `Transfer to ${to}`;
            
            if (!to) {
                alert('Please enter recipient');
                return;
            }
            
            if (!amount || amount <= 0) {
                alert('Please enter a valid amount');
                return;
            }
            
            if (amount > balance) {
                alert('Insufficient funds!');
                return;
            }
            
            balance -= amount;
            transactions.push({
                type: desc,
                amount: -amount,
                date: new Date().toLocaleDateString()
            });
            
            updateBalance();
            updateTransactions();
            closeModal('transfer');
            showSuccess(`Transferred $${amount.toFixed(2)} to ${to} successfully!`);
        }

        // Initialize
        updateTransactions();
    </script>
</body>
</html>